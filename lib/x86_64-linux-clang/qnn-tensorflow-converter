#!/usr/bin/env python3
# =============================================================================
#
#  Copyright (c) 2020-2023 Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  Confidential and Proprietary - Qualcomm Technologies, Inc.
#
# =============================================================================

import sys
import traceback

from qti.aisw.converters.tensorflow import tf_compat_v1

from qti.aisw.converters.tensorflow.tf_to_ir import TFConverterFrontend
from qti.aisw.converters.tensorflow.util import ConverterError
from qti.aisw.converters.common.utils.converter_utils import log_error
from qti.aisw.converters.common.utils.argparser_util import ArgParserWrapper, CustomHelpFormatter
from qti.aisw.converters.common.converter_ir.op_graph_optimizations import IROptimizations
from qti.aisw.converters.common.arch_linter.arch_linter import ArchLinter
from qti.aisw.converters.backend.ir_to_qnn import QnnConverterBackend
from qti.aisw.converters.backend.qnn_quantizer import QnnQuantizer
from qti.aisw.converters.backend.custom_ops.op_factory import QnnCustomOpFactory


class TFtoQNNArgParser(ArgParserWrapper):
    def __init__(self):
        super(TFtoQNNArgParser, self).__init__(formatter_class=CustomHelpFormatter,
                                               conflict_handler='resolve',
                                               parents=[TFConverterFrontend.ArgParser(),
                                                        IROptimizations.ArgParser(),
                                                        QnnQuantizer.ArgParser(),
                                                        QnnConverterBackend.ArgParser(),
                                                        ArchLinter.ArgParser()
                                                        ])
        self.parser.description = 'Script to convert TF model into QNN'


def main():
    parser = TFtoQNNArgParser()
    args = parser.parse_args()

    session = tf_compat_v1.Session(config=tf_compat_v1.ConfigProto(allow_soft_placement=True))
    with session.as_default():
        try:
            converter = TFConverterFrontend(session, args, custom_op_factory = QnnCustomOpFactory())
            ir_graph = converter.convert()

            # Override optimizer flags for QNN backend
            args.perform_axes_to_spatial_first_order = False
            args.squash_box_decoder = True
            args.match_caffe_ssd_to_tf = True
            args.adjust_nms_features_dims = True
            args.extract_color_transform = True
            args.unroll_lstm_time_steps = True
            args.inject_cast_for_gather = True
            args.force_prune_cast_ops = False
            args.align_matmul_ranks = True
            args.handle_gather_negative_indices = True

            optimizer = IROptimizations(args)
            optimized_graph = optimizer.optimize(ir_graph)

            backend = QnnConverterBackend(args)
            backend.save(optimized_graph)

            archLinter = ArchLinter(args)
            archLinter.run_linter(optimized_graph, backend)
        except ConverterError as e:
            log_error("Conversion failed: {}".format(str(e)))
            sys.exit(1)
        except Exception as e:
            log_error("Encountered Error: {}".format(str(e)))
            traceback.print_exc()
            sys.exit(1)


if __name__ == '__main__':
    main()
